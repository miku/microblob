.TH MICROBLOB 1 "MARCH 2017" "Leipzig University Library" "Manuals"
.SH NAME
.PP
microblob \- a simplistic key value server
.SH SYNOPSIS
.PP
\fB\fCmicroblob\fR \fB\fC\-key\fR \fIstring\fP [\-addr \fIHOSTPORT\fP] [\-batch \fINUM\fP] [\-log \fIfile\fP] \fIblobfile\fP
.PP
\fB\fCmicroblob\fR \fB\fC\-r\fR \fIpattern\fP [\-addr \fIHOSTPORT\fP] [\-batch \fINUM\fP] [\-log \fIfile\fP] \fIblobfile\fP
.PP
\fB\fCmicroblob\fR \fB\fC\-t\fR [\-addr \fIHOSTPORT\fP] [\-batch \fINUM\fP] [\-log \fIfile\fP] \fIblobfile\fP
.SH DESCRIPTION
.PP
microblob serves documents from a single file (of newline delimited JSON) over
HTTP. It finds and keeps the offsets and lengths of the documents in a small
embedded database. When a key is requested, it will lookup the offset and
length, seek to the offset and read from the file.
.PP
The use case for microblob is the \fIcreate\-once\fP, \fIupdate\-never\fP case. A file
with 120M documents (130GB) is servable in 40 minutes (50k docs/s or 55M/s
sustained \fIinserts\fP).
.PP
Serving Performance will depend on how much of the file can be kept in the
operating systems' page cache.
.PP
You can move data into the page cache with a simple 
.BR cat (1) 
to 
.BR null (4):
.IP
\fB\fCcat\fR \fIblobfile\fP \fB\fC> /dev/null\fR
.PP
microblob can be updated via HTTP while running. Concurrent updates are not
supported: they do not cause errors, just block. After a successful update, the
new documents are appended to the \fIblobfile\fP\&. Currently microblob is
\fIappend\-only\fP\&.
.SH OPTIONS
.TP
\fB\fC\-addr\fR \fIHOSTPORT\fP
Hostport to listen (default "127.0.0.1:8820").
.TP
\fB\fC\-backend\fR \fINAME\fP
Backend to use: leveldb, debug (default "leveldb").
.TP
\fB\fC\-batch\fR
Number of lines in a batch (default 100000).
.TP
\fB\fC\-key\fR \fISTRING\fP
Key to extract, JSON, top\-level only.
.TP
\fB\fC\-log\fR \fIFILE\fP
Access log file, don't log if empty.
.TP
\fB\fC\-r\fR \fIPATTERN\fP
Regular expression to use as key extractor.
.TP
\fB\fC\-t\fR
Top level key extractor.
.TP
\fB\fC\-version\fR
Show version and exit.
.SH EXAMPLES
.PP
Index and serve (on port localhost:12345) a JSON file named \fIexample.ldj\fP and
use \fIid\fP field as key:
.PP
.RS
.nf
$ microblob \-key id \-addr localhost:12345 example.ldj
\&...
.fi
.RE
.PP
Start with an \fIempty\fP blobfile, then index two documents with different keys,
then query (hello.ldj does not exists at the beginning):
.PP
.RS
.nf
$ microblob hello.ldj
\&...

$ curl \-XPOST \-d '{"id": 1, "name": "alice"}' localhost:8820/update?key=id
$ curl \-XPOST \-d '{"x\-id": 2, "name": "bob"}' localhost:8820/update?key=x\-id

$ curl \-s localhost:8820/1
{"id": 1, "name": "alice"}

$ curl \-s localhost:8820/2
{"x\-id": 2, "name": "bob"}
.fi
.RE
.SH DIAGNOSTICS
.PP
Get current number of documents (might take a few seconds):
.PP
.RS
.nf
$ curl \-s localhost:8820/count
{"count": 12391823}
.fi
.RE
.PP
Live usage statistics are exposed over HTTP:
.PP
.RS
.nf
$ curl \-s localhost:8820/stats | jq .
{
  "pid": 14701,
  "uptime": "7m21.527249914s",
  "uptime_sec": 441.527249914,
  "time": "2017\-03\-20 15:51:02.720553958 +0100 CET",
  "unixtime": 1490021462,
  "status_code_count": {},
  "total_status_code_count": {
    "200": 4
  },
  "count": 0,
  "total_count": 4,
  "total_response_time": "300.243µs",
  "total_response_time_sec": 0.000300243,
  "average_response_time": "75.06µs",
  "average_response_time_sec": 7.506e\-05
}
.fi
.RE
.PP
The response time of the last key query is exposed over HTTP as well:
.PP
.RS
.nf
$ curl \-s localhost:8820/debug/vars | jq .lastResponseTime
0.001238
.fi
.RE
.SH BUGS
.PP
Please report bugs to \[la]https://github.com/miku/microblob/issues\[ra]\&.
.SH AUTHORS
.PP
Martin Czygan \[la]martin.czygan@uni-leipzig.de\[ra]
.SH SEE ALSO
.PP
.BR curl (1), 
.BR cat (1), 
.BR null (4), 
.BR pread (2), 
.BR mincore (2), 
.BR free (1), 
.BR memcachedb (1)
